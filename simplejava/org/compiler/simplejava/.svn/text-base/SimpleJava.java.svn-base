/* Generated By:JavaCC: Do not edit this line. SimpleJava.java */
package org.compiler.simplejava;

public class SimpleJava implements SimpleJavaConstants {

/*

Grammar

program -> classDefinitions functionDefinitions

classDefinitions -> (classDefinition)*

classDefinition -> class identifier { variableDefinitions }

variableDefinitions -> ( variableDefinition; )*

variableDefinition -> identifier identifier ([])*

functionDefinitions -> (identifier identifier ( formalParameterList ) functionDefinition)*

functionDefinition ->  ; | { statementList }

formalParameterList -> variableDefinition (, variableDefinition)*

statementList -> (statement)*

statement->  blockStatement | variableOrFunctionStatement | ifStatement |
      doWhileStatement | whileStatement | forStatement | ; | returnStatement

blockStatement-> { statementList }

variableOrFunctionStatement-> complexLeftAccess (declarations | assignment | functionArguments) ;

complexLeftAccess-> identifier (arrayAccess)* ( . identifier (arrayAccess)* )*)

functionArguments-> "("  (arguments)? ")"

declarations-> declaration (, declaration)*

declaration-> identifier ([])* (= expression)?

assignments-> assignment (, identifier assignment)*

assignment-> (= expression | ++ | -- )

doWhileStatements-> do statement while (expression);

whileStatement-> while (expression) statement

forStatement-> for ( forInitialization? ; (expression)? ; (identifier assignments)? ) statement

forInitialization-> identifier (declarations | assignments ) 

ifStatement-> if ( expression() ) statement() (else statement())?

arguments-> expression (, expression)*

returnStatement-> return (expression)? ;

expression-> operatorExpression | newExpression

operatorExpression-> logicalOrTerm logicalOrExpression

logicalOrExpression-> (||) logicalOrTerm logicalOrExpression | EPSILON

logicalOrTerm-> logicalAndTerm logicalAndExpression

logicalAndExpression-> (&&) logicalAndTerm logicalAndExpression | EPSILON

logicalAndTerm-> negativeExpression | comparativeTerm comparisonExpression

negativeExpression-> (!)+ factor

comparisonExpression-> (== | != | < | <= | > | >=) comparativeTerm | EPSILON

comparativeTerm-> term arithmeticExpression

arithmeticExpression-> (+ | -) term arithmeticExpression | EPSILON  

term-> factor arithmeticFactor

arithmeticFactor-> (* | /) factor arithmeticFactor | EPSILON

factor-> (-)?  ( complexAccess | integer )  | true | false | (expression)

complexAccess-> identifier (functionArguments | (arrayAccess)* ( . identifier (arrayAccess)* )*)

arrayAccess-> "[" expression "]"

identifier: [a-z][a-z0-9]*

newExpression-> new identifier ( "(" ")" | [ expression ] ([])*

*/
  final public void program() throws ParseException {
    classDefinitions();
    functionDefinitions();
    jj_consume_token(0);
  }

  final public void classDefinitions() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      classDefinition();
    }
  }

  final public void classDefinition() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFT_BRACE);
    variableDefinitions();
    jj_consume_token(RIGHT_BRACE);
  }

  final public void variableDefinitions() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      variableDefinition();
      jj_consume_token(SEMICOLON);
    }
  }

  final public void variableDefinition() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(RIGHT_BRACKET);
    }
  }

  final public void functionDefinitions() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(IDENTIFIER);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LEFT_PARENTHESIS);
      formalParameterList();
      jj_consume_token(RIGHT_PARENTHESIS);
      functionDefinition();
    }
  }

  final public void functionDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case LEFT_BRACE:
      jj_consume_token(LEFT_BRACE);
      statementList();
      jj_consume_token(RIGHT_BRACE);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void formalParameterList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      variableDefinition();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        variableDefinition();
      }
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  final public void statementList() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DO:
      case IF:
      case FOR:
      case RETURN:
      case WHILE:
      case LEFT_BRACE:
      case SEMICOLON:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      statement();
    }
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACE:
      blockStatement();
      break;
    case IDENTIFIER:
      variableOrFunctionStatement();
      break;
    case IF:
      ifStatement();
      break;
    case DO:
      doWhileStatement();
      break;
    case WHILE:
      whileStatement();
      break;
    case FOR:
      forStatement();
      break;
    case RETURN:
      returnStatement();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void blockStatement() throws ParseException {
    jj_consume_token(LEFT_BRACE);
    statementList();
    jj_consume_token(RIGHT_BRACE);
  }

  final public void variableOrFunctionStatement() throws ParseException {
    complexLeftAccess();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      declarations();
      break;
    case INCREMENT:
    case DECREMENT:
    case GETS:
      assignment();
      break;
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case NEW:
      case MINUS:
      case LEFT_PARENTHESIS:
      case NOT:
      case INTEGER_LITERAL:
      case IDENTIFIER:
        arguments();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_PARENTHESIS);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void complexLeftAccess() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      arrayAccess();
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_9;
        }
        arrayAccess();
      }
    }
  }

  final public void functionArguments() throws ParseException {
    jj_consume_token(LEFT_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case NEW:
    case MINUS:
    case LEFT_PARENTHESIS:
    case NOT:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      arguments();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PARENTHESIS);
  }

  final public void declarations() throws ParseException {
    declaration();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      declaration();
    }
  }

  final public void declaration() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_11;
      }
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(RIGHT_BRACKET);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GETS:
      jj_consume_token(GETS);
      expression();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  final public void assignments() throws ParseException {
    assignment();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      assignment();
    }
  }

  final public void assignment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GETS:
      jj_consume_token(GETS);
      expression();
      break;
    case INCREMENT:
      jj_consume_token(INCREMENT);
      break;
    case DECREMENT:
      jj_consume_token(DECREMENT);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void doWhileStatement() throws ParseException {
    jj_consume_token(DO);
    statement();
    jj_consume_token(WHILE);
    jj_consume_token(LEFT_PARENTHESIS);
    expression();
    jj_consume_token(RIGHT_PARENTHESIS);
    jj_consume_token(SEMICOLON);
  }

  final public void whileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LEFT_PARENTHESIS);
    expression();
    jj_consume_token(RIGHT_PARENTHESIS);
    statement();
  }

  final public void forStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LEFT_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      forInitialization();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case NEW:
    case MINUS:
    case LEFT_PARENTHESIS:
    case NOT:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      expression();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      assignments();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PARENTHESIS);
    statement();
  }

  final public void ifStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LEFT_PARENTHESIS);
    expression();
    jj_consume_token(RIGHT_PARENTHESIS);
    statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      statement();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void returnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case NEW:
    case MINUS:
    case LEFT_PARENTHESIS:
    case NOT:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      expression();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void arguments() throws ParseException {
    expression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      expression();
    }
  }

  final public void forInitialization() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      declarations();
      break;
    case INCREMENT:
    case DECREMENT:
    case GETS:
      assignments();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case MINUS:
    case LEFT_PARENTHESIS:
    case NOT:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      operatorExpression();
      break;
    case NEW:
      newExpression();
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void operatorExpression() throws ParseException {
    logicalOrTerm();
    logicalOrExpression();
  }

  final public void logicalOrExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      logicalOrTerm();
      logicalOrExpression();
      break;
    default:
      jj_la1[28] = jj_gen;

    }
  }

  final public void logicalOrTerm() throws ParseException {
    logicalAndTerm();
    logicalAndExpression();
  }

  final public void logicalAndExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      logicalAndTerm();
      logicalAndExpression();
      break;
    default:
      jj_la1[29] = jj_gen;

    }
  }

  final public void logicalAndTerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      negativeExpression();
      break;
    case FALSE:
    case TRUE:
    case MINUS:
    case LEFT_PARENTHESIS:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      comparativeTerm();
      comparisonExpression();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void negativeExpression() throws ParseException {
    label_14:
    while (true) {
      jj_consume_token(NOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_14;
      }
    }
    factor();
  }

  final public void comparisonExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case NOT_EQUAL:
    case LESS_THAN:
    case GREATER_THAN:
    case LESS_THAN_OR_EQUAL:
    case GREATER_THAN_OR_EQUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
        break;
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        break;
      case LESS_THAN_OR_EQUAL:
        jj_consume_token(LESS_THAN_OR_EQUAL);
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        break;
      case GREATER_THAN_OR_EQUAL:
        jj_consume_token(GREATER_THAN_OR_EQUAL);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      comparativeTerm();
      break;
    default:
      jj_la1[33] = jj_gen;

    }
  }

  final public void comparativeTerm() throws ParseException {
    term();
    arithmeticExpression();
  }

  final public void arithmeticExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
      arithmeticExpression();
      break;
    default:
      jj_la1[35] = jj_gen;

    }
  }

  final public void term() throws ParseException {
    factor();
    arithmeticFactor();
  }

  final public void arithmeticFactor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
    case DIVIDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      factor();
      arithmeticFactor();
      break;
    default:
      jj_la1[37] = jj_gen;

    }
  }

  final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        complexAccess();
        break;
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      expression();
      jj_consume_token(RIGHT_PARENTHESIS);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void complexAccess() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PARENTHESIS:
      functionArguments();
      break;
    default:
      jj_la1[44] = jj_gen;
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_15;
        }
        arrayAccess();
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_16;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFT_BRACKET:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_17;
          }
          arrayAccess();
        }
      }
    }
  }

  final public void arrayAccess() throws ParseException {
    jj_consume_token(LEFT_BRACKET);
    expression();
    jj_consume_token(RIGHT_BRACKET);
  }

  final public void newExpression() throws ParseException {
    jj_consume_token(NEW);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      jj_consume_token(RIGHT_PARENTHESIS);
      break;
    case LEFT_BRACKET:
      arrayAccess();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_18;
        }
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(RIGHT_BRACKET);
      }
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public SimpleJavaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x0,0x20000000,0x0,0x80000000,0x0,0x0,0x802cc000,0x802cc000,0x1520000,0x18000000,0x20000000,0x0,0x20000000,0x1520000,0x0,0x20000000,0x0,0x0,0x18000000,0x0,0x1520000,0x0,0x10000,0x1520000,0x0,0x18000000,0x1520000,0x0,0x0,0x1120000,0x0,0x0,0x0,0x1800000,0x1800000,0x6000000,0x6000000,0x1000000,0x0,0x1120000,0x20000000,0x0,0x20000000,0x0,0x20000000,0x20000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x20000,0x0,0x20000,0x20,0x10,0x20000,0x20020,0x20020,0x38002,0x21002,0x0,0x8,0x0,0x38002,0x10,0x0,0x1000,0x10,0x1000,0x20000,0x38002,0x20000,0x0,0x38002,0x10,0x21000,0x38002,0x4000,0x2000,0x38002,0x8000,0xfc0,0xfc0,0x0,0x0,0x0,0x0,0x0,0x30000,0x30002,0x0,0x8,0x0,0x2,0x0,0x2,};
   }

  /** Constructor with InputStream. */
  public SimpleJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleJava(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleJava(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleJava(SimpleJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 47; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
